import express from 'express';
import bodyParser from 'body-parser';
import session from 'express-session';
import crypto from 'crypto';
import memorystore from 'memorystore';
import multer from 'multer';
import fs from 'fs';
import {Chart} from 'chart.js';
import csvParser from 'csv-parser';


const PORT = 8080;
const app = express();
const upload = multer({ dest: 'uploads/' }); // Set the destination folder for uploaded files

app.listen(PORT, () => {
  console.log(`Server is ready, listening on port ${PORT}`);
});

app.set('view engine', 'ejs');
app.use(express.static('public'));
app.use(express.static('images'));
app.use(bodyParser.urlencoded({ extended: true }));

const MemoryStore = memorystore(session);

app.set('trust proxy', 1);
app.use(
  session({
    cookie: { maxAge: 86400000 },
    store: new MemoryStore({
      checkPeriod: 86400000, // prune expired entries every 24h
    }),
    resave: false,
    saveUninitialized: false,
    secret: 'keyboard cat',
  })
);

//DATABASE CONNECTION-------------------------------------------------------------------------------------------
import mysql from 'mysql'

const pool = mysql.createPool({
    user: 'root',
    password: '',
    database: 'bagbook',
    host: 'localhost'

});

const dbConnect = () => {
    return new Promise((resolve, reject) => {
        pool.getConnection((err, conn) => {
            if(err){
                reject (err);
            }
            else{
                resolve(conn);
            }
        }
        )
    })
};
//==============================================================================================================

//FOR AUTHENTICATION-----------------------------------------------------------------------------------------
const auth = (req, res, next) => {
  if (req.session.username) {
    next();
  } else {
    res.redirect('/');
  }
};
//==============================================================================================================



//PAGE PERTAMA YANG MUNCUL (LOG IN) --------------------------------------------------------------------------------
let showAlert = false;
app.get('/', (req, res) => {
  res.render('log_in_public', {
    showAlert,
  });
  showAlert = false;
});
//==============================================================================================================


//LOG IN (memeriksa apakah username & password yg diinput user benar)-----------------------------------------------
app.post('/log_in_public', (req, res) => {
  //mengambil username dan password yg diinput user
  let username = req.body.username;
  let password = crypto.createHash('sha256').update(req.body.password).digest('base64');
  //cek apakah username dan password tidak kosong
  if (username && password) {
    userLogin(username, password).then((data) => {
      //cek apakah username&pass benar
      let res_data = JSON.parse(JSON.stringify(data))[0];
      //jika username&pass benar
      if (res_data !== undefined) {
        showAlert = false;
        //tambahkan session
        let session = req.session;
        //tambahkan data user ke session
        session.username = res_data.username;
        //mengubah pass yg dikirimkan menjadi hash dengan algo sha256
        session.password = res_data.password;
        session.photo = res_data.user_photo;
        session.full_name = res_data.full_name;
        session.email = res_data.email;
        session.idUser = res_data.idUser;
        //status = 1 (publik), 0(admin)
        session.status = res_data.status;
        //jika yang login adalah user publik
        if (session.status === 1) {
          //halaman berpindah ke halaman utama (users)
          res.redirect('/dashboard_public');
        } else {
          //halaman berpindah ke dashboard admin
          res.redirect('/dashboard_admin');
        }
      }
      //jika data yang didapatkan kosong = username dan/atau password salah
      else {
        showAlert = true;
        res.redirect('/');
      }
    });
    }
});

const userLogin = (username, pass) => {
    return new Promise((resolve, reject) => {
        pool.query('SELECT * FROM user WHERE username = ? AND password = ?', [username, pass], (err, result) => {
            if(err){
                reject (err);
            }
            else{
                resolve(result);
            }
        }
        )
    })
};

//==============================================================================================================


//SIGN UP ------------------------------------------------------------------------------------------------------
//membuka halaman sign up
app.get('/sign_up_public', (req, res)=>{
    res.render('sign_up_public')
})

//memasukan data user baru ke database
let email_sign_up;
app.post('/submit_user', (req, res)=>{
    //mengambil full_name, email, username, dan password yg diregister oleh user
    let full_name_sign_up = req.body.full_name;
    email_sign_up = req.body.email_address;
    let username_sign_up = req.body.username_sign_up;
    let password_sign_up = crypto.createHash('sha256').update(req.body.password_sign_up).digest('base64');
    addUser(full_name_sign_up, email_sign_up, username_sign_up, password_sign_up).then(() => 
        res.redirect('/verify_email')
    )
})

//masukan ke database
const addUser = (full_name_sign_up, email_sign_up, username_sign_up, password_sign_up) => {
    return new Promise((resolve, reject) => {
        pool.query('INSERT INTO user (full_name, email, username, password, user_photo) VALUES (?,?,?,?, )', 
        [full_name_sign_up, email_sign_up, username_sign_up, password_sign_u], (err, result) => {
            if(err){
                reject (err);
            }
            else{
                resolve(result);
            }
        })
    })
};

//AJAX (mengecek apakah username yg diinput user sudah ada di database)
app.get('/check_username', (req, res) => {
    const inputed_username = req.query.inputed_username;
    let usernameTaken = true;
    usernameChecker(inputed_username).then((data) => {
        usernameTaken = (JSON.parse(JSON.stringify(data))[0]) !==undefined;
        const response = {
            taken: usernameTaken
          };
          
          res.json(response);
    });
})
//cek ke database
const usernameChecker = (username_sign_up) => {
    return new Promise((resolve, reject) => {
        pool.query('SELECT idUser FROM user WHERE username = ?', [username_sign_up], (err, result) => {
            if(err){
                reject (err);
            }
            else{
                resolve(result);
            }
        }
        )
    })
};

//AJAX (mengecek apakah email yg diinput user sudah ada di database)
app.get('/check_email', (req, res) => {
    const inputed_email = req.query.inputed_email;
    let emailTaken = true;
    emailChecker(inputed_email).then((data) => {
        emailTaken = (JSON.parse(JSON.stringify(data))[0]) !==undefined;
        const response = {
            taken: emailTaken
          };
          
          res.json(response);
    });
})
//cek ke database
const emailChecker = (email_sign_up) => {
    return new Promise((resolve, reject) => {
        pool.query('SELECT idUser FROM user WHERE email = ?', [email_sign_up], (err, result) => {
            if(err){
                reject (err);
            }
            else{
                resolve(result);
            }
        }
        )
    })
};

//membuka halaman verify email
app.get('/verify_email', (req, res)=>{
    res.render('verify_email',{
        email: email_sign_up
    }) 
})
//membuka halaman konfirmasi verify email
app.get('/verify_conf', (req, res)=>{
    res.render('verify_conf',{
        email: email_sign_up
    }) 
})
//==============================================================================================================


//PUBLIC DASHBOARD----------------------------------------------------------------------------------------------
app.get('/dashboard_public',auth, (req, res)=>{
    getDashboardData().then((dashboardData) => {
        res.render('dashboard_public',{
            username: req.session.username,
            photo: Buffer.from(req.session.photo).toString('base64'),
            dashboardData: dashboardData,
            status : req.session.status
        }) 
    })
})

const getDashboardData = (id) => {
    return new Promise((resolve, reject) => {
        pool.query('SELECT bag.bag_name, bag.bag_photo, bag.idBag, review_count.banyak_review, review_avg.nilai_review FROM bag JOIN ((SELECT COUNT(idReview) AS banyak_review, idBag FROM review GROUP BY idBag) AS review_count) ON bag.idBag = review_count.idBag JOIN ((SELECT AVG(value) AS nilai_review, idBag FROM review GROUP BY idBag) AS review_avg) ON bag.idBag = review_avg.idBag ORDER BY review_avg.nilai_review DESC LIMIT 10', (err, result) => {
            if (err) {
                reject(err);
            } else {
                resolve(result);
            }
        });
    });
};


// Add a new route for sorting
app.get('/sortData',auth, (req, res) => {
    const sortOption = req.query.sort;
    let sqlQuery = '';
  
    // Determine the SQL query based on the sortOption
    if (sortOption === 'review-nilai') {
      sqlQuery = 'SELECT bag.bag_name, bag.bag_photo, bag.idBag, COALESCE(count.banyak_review, 0) AS banyak_review, COALESCE(avg.nilai_review, 0) AS nilai_review FROM bag LEFT JOIN (SELECT COUNT(idReview) AS banyak_review, idBag FROM review GROUP BY idBag) AS count ON bag.idBag = count.idBag LEFT JOIN (SELECT AVG(value) AS nilai_review, idBag FROM review GROUP BY idBag) AS avg ON bag.idBag = avg.idBag ORDER BY avg.nilai_review DESC LIMIT 10';
    } else if (sortOption === 'review-banyak') {
      sqlQuery = 'SELECT bag.bag_name, bag.bag_photo, bag.idBag, COALESCE(count.banyak_review, 0) AS banyak_review, COALESCE(avg.nilai_review, 0) AS nilai_review FROM bag LEFT JOIN (SELECT COUNT(idReview) AS banyak_review, idBag FROM review GROUP BY idBag) AS count ON bag.idBag = count.idBag LEFT JOIN (SELECT AVG(value) AS nilai_review, idBag FROM review GROUP BY idBag) AS avg ON bag.idBag = avg.idBag ORDER BY COALESCE(count.banyak_review, 0) DESC LIMIT 10';
    }
  
    // Execute the SQL query and retrieve sorted data
    pool.query(sqlQuery, (err, result) => {
    if (err) {
      console.error(err);
      res.status(500).send('Internal Server Error');
    } else {
      const sortedData = result;
  
      // Render the sorted data using the same EJS template
      res.render('bag_items', { 
        dashboardData: sortedData
     }, (err, html) => {
        if (err) {
          console.error(err);
          res.status(500).send('Internal Server Error');
        } else {
          res.send(html);
        }
      });
    }
  });
  
  });
//==============================================================================================================

//BAG REVIEW----------------------------------------------------------------------------------------------
app.get('/bag_details/:id',auth, async (req, res) => {
    try {
        //mengambil id dari bag yg ingin dilihat detailnya
        const idBag = parseInt(req.params.id); // Convert userId to an integer

        if (isNaN(idBag)) {
            res.status(500).send('Invalid userId'); // Send an error message to the client
            return; // Stop further code execution
        }

        const bagDetails = await getBagDetails(idBag);
        const res_bagDetails = JSON.parse(JSON.stringify(bagDetails))[0];

        const bagReviews = await getBagReviews(idBag);
         
        const bagReviewCount = await getBagReviewsCount(idBag);
        const bagReviewAvg = await getBagReviewsAvg(idBag);
        const bagReviewsValue = await getBagReviewsValue(idBag);

        res.render('bag_review', {
            username: req.session.username,
            photo: Buffer.from(req.session.photo).toString('base64'),
            res_bagDetails: res_bagDetails,
            bagReviews: bagReviews,
            bagReviewCount: (JSON.parse(JSON.stringify(bagReviewCount))[0]).jumlah,
            bagReviewAvg: (JSON.parse(JSON.stringify(bagReviewAvg))[0]).avg,
            bagReviewsValue: bagReviewsValue,
            status : req.session.status
        })
    } catch (error) {
        console.error(error);
        res.status(500).send('An error occurred');
    }
});

const getBagDetails = (id) => {
    return new Promise((resolve, reject) => {
        pool.query('SELECT * FROM bag JOIN sub_category ON Bag.idSubCat = sub_category.idSubCat JOIN category ON sub_category.idCat = category.idCat JOIN brand ON brand.idBrand = bag.idBrand JOIN designer ON designer.idDes = bag.idDes WHERE bag.idBag = ?', [id], (err, result) => {
            if (err) {
                reject(err);
            } else {
                resolve(result);
            }
        });
    });
};

const getBagReviews = (id) => {
    return new Promise((resolve, reject) => {
        pool.query('SELECT * FROM bag LEFT JOIN review ON bag.idBag = review.idBag JOIN user ON review.idUser = user.idUser WHERE bag.idBag = ?', [id], (err, result) => {
            if (err) {
                reject(err);
            } else {
                resolve(result);
            }
        });
    });
};

const getBagReviewsValue = (id) => {
    return new Promise((resolve, reject) => {
        pool.query('SELECT value FROM review WHERE idBag = ?', [id], (err, result) => {
            if (err) {
                reject(err);
            } else {
                resolve(result);
            }
        });
    });
};

const getBagReviewsCount = (id) => {
    return new Promise((resolve, reject) => {
        pool.query('SELECT COALESCE(COUNT(idReview), 0) AS "jumlah" FROM review WHERE idBag = ?', [id], (err, result) => {
            if (err) {
                reject(err);
            } else {
                resolve(result);
            }
        });
    });
};

const getBagReviewsAvg = (id) => {
    return new Promise((resolve, reject) => {
        pool.query('SELECT COALESCE(AVG(value), 0) AS "avg" FROM review WHERE idBag = ?', [id], (err, result) => {
            if (err) {
                reject(err);
            } else {
                resolve(result);
            }
        });
    });
};

//==============================================================================================================

//ADD REVIEW----------------------------------------------------------------------------------------------
app.get('/add_review/:id',auth, async (req, res) => {
    try {
        //mengambil id dari bag yg ingin dilihat detailnya
        const idBag = parseInt(req.params.id); // Convert userId to an integer

        if (isNaN(idBag)) {
            res.status(500).send('Invalid userId'); // Send an error message to the client
            return; // Stop further code execution
        }

        const bagDetails = await getBagDetails(idBag);
        const res_bagDetails = JSON.parse(JSON.stringify(bagDetails))[0];
        const bagReviewCount = await getBagReviewsCount(idBag);
        const bagReviewAvg = await getBagReviewsAvg(idBag);
        const reviewDesc = await getReviewDetails();

        res.render('add_review', {
            username: req.session.username,
            photo: Buffer.from(req.session.photo).toString('base64'),
            res_bagDetails: res_bagDetails,
            bagReviewCount: (JSON.parse(JSON.stringify(bagReviewCount))[0]).jumlah,
            bagReviewAvg: (JSON.parse(JSON.stringify(bagReviewAvg))[0]).avg,
            reviewDesc: reviewDesc
        })
    } catch (error) {
        console.error(error);
        res.status(500).send('An error occurred');
    }
});

const getReviewDetails = () => {
    return new Promise((resolve, reject) => {
        pool.query('SELECT * FROM review_value', (err, result) => {
            if (err) {
                reject(err);
            } else {
                resolve(result);
            }
        });
    });
};

app.post('/add_review/:idBagtoReview',auth, (req, res)=>{
    const idBagtoReview = parseInt(req.params.idBagtoReview);
    const rating = req.body.nilai_review;
    const review = req.body.input_review;
    const idUser = req.session.idUser;

    
    addReview(idBagtoReview, rating, review, idUser).then(() => 
        res.redirect('/review_added_conf')
    )
})

const addReview = (idBag, rating, review, idUser) => {
    return new Promise((resolve, reject) => {
        pool.query('INSERT INTO Review (idBag, value, review_text, idUser) VALUES (?, ?,?,?)',[idBag, rating, review, idUser], (err, result) => {
            if (err) {
                reject(err);
            } else {
                resolve(result);
            }
        });
    });
};

app.get('/review_added_conf',auth, (req, res)=>{
    res.render('review_added_conf',{
        username: req.session.username,
        photo: Buffer.from(req.session.photo).toString('base64')
    }) 
})

//==============================================================================================================

//SEARCH FOR USER&BAG----------------------------------------------------------------------------------------------
app.get('/search', auth, async (req, res) => {
    try {
      const search_input = req.query.search_input;
      const userId = req.session.idUser;
  
      const users = await searchUsers(search_input, userId);
      const bags = await searchBags(search_input);
      const following = await followingList(userId);
      const followers = await followersList(userId);
  
      res.render('search', {
        username: req.session.username,
        photo: Buffer.from(req.session.photo).toString('base64'),
        followingList: following,
        followersList: followers,
        searchResultsUsers: users,
        searchResultsBags: bags,
        status : req.session.status
      });
    } catch (err) {
      console.error(err);
      res.status(500).send('Internal Server Error');
    }
  });
  
  
  //method to search users (cannot search admin and their own account)
  const searchUsers = (search_input, userId) => {
    return new Promise((resolve, reject) => {
      const query = `
        SELECT User.*, 
          CASE WHEN EXISTS (SELECT 1 FROM Follow WHERE idU1 = ? AND idU2 = User.idUser) THEN 1 ELSE 0 END AS isFollowed 
        FROM User 
        WHERE username LIKE ? AND status = 1 AND User.idUser <> ?`;
      const params = [userId, `%${search_input}%`, userId];
  
      pool.query(query, params, (err, result) => {
        if (err) {
          reject(err);
        } else {
          const usersWithFollowStatus = result.map((user) => {
            user.isFollowed = user.isFollowed === 1; // Convert 1/0 to true/false
            return user;
          });
          resolve(usersWithFollowStatus);
        }
      });
    });
  };

  //method to search for bags
  const searchBags = (search_input) => {
    return new Promise((resolve, reject) => {
        pool.query('SELECT bag.bag_name, bag.bag_photo, bag.idBag, IFNULL(review_count.banyak_review, 0) AS banyak_review, IFNULL(review_avg.nilai_review, 0) AS nilai_review FROM bag LEFT JOIN (SELECT COUNT(idReview) AS banyak_review, idBag FROM review GROUP BY idBag) AS review_count ON bag.idBag = review_count.idBag LEFT JOIN (SELECT AVG(value) AS nilai_review, idBag FROM review GROUP BY idBag) AS review_avg ON bag.idBag = review_avg.idBag WHERE bag.bag_name LIKE ?', ['%' + search_input + '%'], (err, result) => {
            if(err){
                reject (err);
            }
            else{
                resolve(result);
            }
        }
        )
    })
};
  
  
//==============================================================================================================

//PROFILE PUBLIC----------------------------------------------------------------------------------------------
//membuka halaman profile public, mengambil data" yang akan ditampilkan dari database
app.get('/profile_public', auth, async (req, res) => {
  try {
    let startData = req.query.start;
    const followingCountResult = await followingCount(req.session.idUser);
    const followersCountResult = await followersCount(req.session.idUser);
    const reviewUserCountResult = await reviewUserCount(req.session.idUser);

    const followingCountValue = JSON.parse(JSON.stringify(followingCountResult))[0].following;
    const followersCountValue = JSON.parse(JSON.stringify(followersCountResult))[0].followers;
    const userReviewCountValue = JSON.parse(JSON.stringify(reviewUserCountResult))[0].jumlah_user_review;

    let userDataReviewResult;

    if (startData === undefined) {
      startData = 0; // Set default value to 0
    }
    
    userDataReviewResult = await userReviewsLimit(req.session.idUser, startData);

    res.render('profile_public', {
      full_name: req.session.full_name,
      username: req.session.username,
      photo: Buffer.from(req.session.photo).toString('base64'),
      followers: followersCountValue,
      following: followingCountValue,
      user_review_count: userReviewCountValue,
      userDataReview: userDataReviewResult
    });
  } catch (error) {
    // Handle any errors that occur during the async operations
    console.error(error);
    res.status(500).send('Internal Server Error');
  }
});

  
  


//mencari tau brp banyak followers dari user melalui database
const followersCount = (id) => {
    return new Promise((resolve, reject) => {
        pool.query('SELECT COUNT(idU1) AS "followers" FROM follow WHERE idU2 = ?', [id], (err, result) => {
            if(err){
                reject (err);
            }
            else{
                resolve(result);
            }
        }
        )
    })
};
//mencari tau brp banyak following dari user melalui database
const followingCount = (id) => {
    return new Promise((resolve, reject) => {
        pool.query('SELECT COUNT(idU2) AS "following" FROM follow WHERE idU1 = ?', [id], (err, result) => {
            if(err){
                reject (err);
            }
            else{
                resolve(result);
            }
        }
        )
    })
};
//mencari tau user tsb sudah memberika berapa banyak review
const reviewUserCount = (id) => {
    return new Promise((resolve, reject) => {
        pool.query('SELECT COUNT(idUser) AS "jumlah_user_review" FROM review WHERE idUser = ?', [id], (err, result) => {
            if(err){
                reject (err);
            }
            else{
                resolve(result);
            }
        }
        )
    })
};
//mencari tau review" yang sudah dibuat oleh user
const userReviews = (id) => {
    return new Promise((resolve, reject) => {
        pool.query('SELECT review.review_text AS "teks", review.value AS "nilai", bag.bag_name AS "namaTas", bag.bag_photo AS "fotoTas" FROM review JOIN bag ON review.idBag = bag.idBag WHERE idUser = ?', [id], (err, result) => {
            if(err){
                reject (err);
            }
            else{
                resolve(result);
            }
        }
        )
    })
};

//mencari tau review" yang sudah dibuat oleh user
const userReviewsLimit = (id,start_data) => {
    return new Promise((resolve, reject) => {
        pool.query('SELECT review.review_text AS "teks", review.value AS "nilai", bag.bag_name AS "namaTas", bag.bag_photo AS "fotoTas" FROM review JOIN bag ON review.idBag = bag.idBag WHERE idUser = ? LIMIT ?,?', [id, parseInt(start_data), 4], (err, result) => {
            if(err){
                reject (err);
            }
            else{
                resolve(result);
            }
        }
        )
    })
};
//==============================================================================================================

//warning: kode bawah ini akan run dua kali --> menyebabkan pembacaan undefined pada iterasi kedua (sudah dihandle menggunakan isNaN(userId))
//OTHER PEOPLE PROFILE----------------------------------------------------------------------------------------------
app.get('/other_user/:userId', auth, async (req, res) => {
    try {
        const userId = parseInt(req.params.userId); // Convert userId to an integer

        if (isNaN(userId)) {
            res.status(500).send('Invalid userId'); // Send an error message to the client
            return; // Stop further code execution
        }

        const followingResult = await followingCount(userId);
        const following = followingResult[0].following;

        const followersResult = await followersCount(userId);
        const followers = followersResult[0].followers;

        const userReviewCountResult = await reviewUserCount(userId);
        const userReviewCount = userReviewCountResult[0].jumlah_user_review;

        const userDataReview = await userReviews(userId);
        const userDataReviewRes = userDataReview;

        const otherUserData = await getOtherUserData(userId);
        const res_otherUserData = JSON.parse(JSON.stringify(otherUserData))[0];

        res.render('other_user_profile', {
            username: req.session.username,
            photo: Buffer.from(req.session.photo).toString('base64'),
            other_full_name: res_otherUserData.full_name,
            other_username: res_otherUserData.username,
            other_photo: res_otherUserData.user_photo,
            other_id :res_otherUserData.idUser,
            other_followers: followers,
            other_following: following,
            other_user_review_count: userReviewCount,
            other_userDataReview: userDataReviewRes,
            status : req.session.status
        });
    } catch (error) {
        console.error(error);
        res.status(500).send('An error occurred');
    }
});

  const getOtherUserData = (id) => {
    return new Promise((resolve, reject) => {
        pool.query('SELECT * FROM user WHERE idUser = ?', [id], (err, result) => {
            if(err){
                reject (err);
            }
            else{
                resolve(result);
            }
        }
        )
    })
};


//==============================================================================================================

//EDIT PROFILE----------------------------------------------------------------------------------------------
app.get('/edit_profile',auth, (req, res)=>{
    res.render('edit_profile',{
        username: req.session.username,
        photo: Buffer.from(req.session.photo).toString('base64'),
        full_name: req.session.full_name,
        email: req.session.email
    })  
})

app.post('/change_photo_public', upload.single('photo'), auth, (req, res) => {
    const newPhoto = req.file; // The uploaded photo is available as req.file
    const idUser = req.session.idUser;
    const photoData = fs.readFileSync(newPhoto.path);
    changePhoto(idUser,photoData).then(() => {
        getNewPhoto(idUser).then((newPhoto) => {
            req.session.photo = JSON.parse(JSON.stringify(newPhoto))[0].user_photo;
            

            res.redirect('/changed_conf_public');// Redirect the user to the profile page after saving changes
    })
    })
  })

//mencari tau review" yang sudah dibuat oleh user
const changePhoto = (id,photo) => {
    return new Promise((resolve, reject) => {
        pool.query('UPDATE user SET user_photo = ? WHERE idUser = ?', [photo, id], (err, result) => {
            if(err){
                reject (err);
            }
            else{
                resolve(result);
            }
        }
        )
    })
};

const getNewPhoto = (id) => {
    return new Promise((resolve, reject) => {
        pool.query('SELECT user_photo FROM user WHERE idUser = ?', [id], (err, result) => {
            if(err){
                reject (err);
            }
            else{
                resolve(result);
            }
        }
        )
    })
};

app.get('/changed_conf_public',auth, (req, res)=>{
    res.render('changed_conf_public',{
        username: req.session.username,
        photo: Buffer.from(req.session.photo).toString('base64')
    })  
})


//==============================================================================================================

//FOLLOWING & FOLLOWERS LIST---------------------------------------------------------------------------------
//membuka halaman following (user" lain yg difollow user tsb)
app.get('/following_public',auth, (req, res)=>{
    followingList(req.session.idUser).then((followingList) => {
        res.render('following_public',{
            username: req.session.username,
            photo: Buffer.from(req.session.photo).toString('base64'),
            followingList: followingList
        })  
    })
})



//mencari tau list user" yang difollow oleh user tsb
const followingList = (id) => {
    return new Promise((resolve, reject) => {
        pool.query('SELECT User.*, CASE WHEN EXISTS (SELECT 1 FROM Follow WHERE idU1 = ? AND idU2 = User.idUser) THEN 1 ELSE 0 END AS isFollowed FROM User INNER JOIN Follow ON User.idUser = Follow.idU2 WHERE Follow.idU1 = ?', [id,id], (err, result) => {
            if(err){
                reject (err);
            }
            else{
                resolve(result);
            }
        }
        )
    })
};

app.get('/followers_public',auth, (req, res)=>{
    followersList(req.session.idUser).then((followersList) => {
        res.render('followers_public',{
            username: req.session.username,
            photo: Buffer.from(req.session.photo).toString('base64'),
            followersList: followersList
        })  
    })
})



//mencari tau list user" yang difollow oleh user tsb
const followersList = (id) => {
    return new Promise((resolve, reject) => {
        pool.query('SELECT User.*, CASE WHEN EXISTS (SELECT 1 FROM Follow WHERE idU1 = ? AND idU2 = User.idUser) THEN 1 ELSE 0 END AS isFollowed FROM User INNER JOIN Follow ON User.idUser = Follow.idU1 WHERE Follow.idU2 = ?', [id,id], (err, result) => {
            if(err){
                reject (err);
            }
            else{
                resolve(result);
            }
        }
        )
    })
};

// Follow/unfollow a user
app.post('/follow/:userId', auth, (req, res) => {
    const userIdFollow = req.params.userId;
  
    checkFollowQuery(req.session.idUser, userIdFollow)
      .then((hasFollow) => {
        const followExists = hasFollow[0].count > 0;
  
        if (followExists) {
          return unfollowUser(req.session.idUser, userIdFollow);
        } else {
          return followUser(req.session.idUser, userIdFollow);
        }
      })
      .then(() => {
        res.json({ success: true });
      })
      .catch((error) => {
        console.error('Failed to follow/unfollow user:', error);
        res.status(500).json({ success: false, error: error.message });
      });
  });

//mencari tahu apakah user tsb sudah difollow (tampilan button followed)
const checkFollowQuery = (myId, userId) => {
    return new Promise((resolve, reject) => {
        pool.query('SELECT COUNT(*) AS count FROM Follow WHERE idU1 = ? AND idU2 = ?', [myId, userId], (err, result) => {
            if(err){
                reject (err);
            }
            else{
                resolve(result);
            }
        }
        )
    })
};

//mengupdate data jika user mengfollow user lain
const followUser = (myId, userId) => {
    return new Promise((resolve, reject) => {
        pool.query('INSERT INTO Follow (idU1, idU2) VALUES (?, ?)', [myId, userId], (err, result) => {
            if(err){
                reject (err);
            }
            else{
                resolve(result);
            }
        }
        )
    })
};

//mengupdate data jika user mengunfollow user lain
const unfollowUser = (myId, userId) => {
    return new Promise((resolve, reject) => {
        pool.query('DELETE FROM Follow WHERE idU1 = ? AND idU2 = ?', [myId, userId], (err, result) => {
            if(err){
                reject (err);
            }
            else{
                resolve(result);
            }
        }
        )
    })
};
  
//==============================================================================================================


//LOG OUT----------------------------------------------------------------------------------------------
//membuka halaman log out
app.get('/log_out', auth, (req, res) => {
    res.render('log_out')
})
//membuka halaman konfirmasi log out (session akan didestroy)
app.get('/log_out_conf', auth, (req, res) => {
    //menyimpan username sebelum session di destroy
    const username = req.session.username;

    // Destroy the session
    req.session.destroy((err) => {
        if (err) {
            console.log(err);
        } else {
            res.render('log_out_conf', {
                username: username
            });
        }
    });
})
//==============================================================================================================

//ADMIN-------------------------------------------------------------------------------------------


// agar bisa masuk ke halaman add item
app.get('/pick_add', (req, res) => {
    res.render('pick_add');
});

//ADD ITEM -------------------------------------------------------------------------------------------

// agar bisa masuk ke halaman add_category
app.get('/add_category', (req, res) => {
    res.render('add_category');
});

// agar bisa masuk ke add_sub_category
app.get('/add_sub_category', (req, res) => {
    getCategories()
        .then(categories => {
            res.render('add_sub_category', { categories });
        })
});

// agar bisa masuk ke add_brand
app.get('/add_brand', (req, res) => {
    res.render('add_brand');
});

// agar bisa masuk ke add_bag
app.get('/add_bag', (req, res) => {
    Promise.all([getBrands(), getDesigners(), getCategoriesBag(), getSubCategories()])
      .then(([brands, designers, categories, subCategories]) => {
        res.render('add_bag', { brands, designers, categories, subCategories });
      })
  });

// agar bisa masuk ke add_designer
app.get('/add_designer', (req, res) => {
    res.render('add_designer');
});

//==============================================================================================================

//ADD CATEGORY-------------------------------------------------------------------------------------------
// agar bisa ngambil data dari add_category
app.post('/add_category', (req, res) => {
  let added_category = req.body.category;
  addCategory(added_category)
    .then(() => {
      res.redirect('/item_added_conf');
    })
});

// mengecek kategori menggunakan AJAX
app.get('/check_category', (req, res) => {
  let category = req.query.inputed_category;
  let categoryTaken = true;
  checkCategoryExistence(category).then((exists) => {
      categoryTaken = (JSON.parse(JSON.stringify(exists))[0]) !==undefined;
        const response = {
            taken: categoryTaken
          };
      res.json( response );
    })
    
});

const checkCategoryExistence = (added_category) => {
  return new Promise((resolve, reject) => {
      pool.query('SELECT idCat FROM category WHERE cat_name = ?', [added_category], (err, result) => {
          if(err){
              reject (err);
          }
          else{
              resolve(result);
          }
      }
      )
  })
};


// meletakkan data dari input ke database kategori
const addCategory = (category) => {
    return new Promise((resolve, reject) => {
      pool.query('INSERT INTO category (cat_name) VALUES (?)', [category], (err, result) => {
        if (err) {
          reject(err);
        } else {
          resolve(result);
        }
      });
    });
  };
  
//==============================================================================================================

//ITEM_ADDED_CONF-------------------------------------------------------------------------------------------

app.get('/item_added_conf', (req, res) => {
    res.render('item_added_conf');
});

//==============================================================================================================

//ADD BRAND-------------------------------------------------------------------------------------------

// agar bisa ngambil data dari add_brand
app.post('/add_brand', (req, res) => {
    let added_brand = req.body.brand;
    addBrand(added_brand)
        .then(() => {
            res.redirect('/item_added_conf');
        })
});

// meletakkan data dari input ke database brand
const addBrand = (brand) => {
    return new Promise((resolve, reject) => {
      pool.query('INSERT INTO brand (brand_name) VALUES (?)', [brand], (err, result) => {
        if (err) {
          reject(err);
        } else {
          resolve(result);
        }
      });
    });
  };

// mengecek kategori menggunakan AJAX
app.get('/check_brand', (req, res) => {
  let brand = req.query.inputed_brand;
  let brandTaken = true;
  checkBrandExistence(brand).then((exists) => {
      brandTaken = (JSON.parse(JSON.stringify(exists))[0]) !==undefined;
        const response = {
            taken: brandTaken
          };
      res.json( response );
    })
    
});

const checkBrandExistence = (added_brand) => {
  return new Promise((resolve, reject) => {
      pool.query('SELECT idBrand FROM brand WHERE brand_name = ?', [added_brand], (err, result) => {
          if(err){
              reject (err);
          }
          else{
              resolve(result);
          }
      }
      )
  })
};

  
//==============================================================================================================

//ADD DESIGNER-------------------------------------------------------------------------------------------

// agar bisa ngambil data dari add_designer
app.post('/add_designer', (req, res) => {
    let added_designer = req.body.designer;
    addDesigner(added_designer)
        .then(() => {
            res.redirect('/item_added_conf');
        })
});

// meletakkan data dari input ke database designer
const addDesigner = (designer) => {
    return new Promise((resolve, reject) => {
      pool.query('INSERT INTO designer (des_name) VALUES (?)', [designer], (err, result) => {
        if (err) {
          reject(err);
        } else {
          resolve(result);
        }
      });
    });
  };

// mengecek designer menggunakan AJAX
app.get('/check_designer', (req, res) => {
  let designer = req.query.inputed_designer;
  let designerTaken = true;
  checkDesignerExistence(designer).then((exists) => {
      designerTaken = (JSON.parse(JSON.stringify(exists))[0]) !==undefined;
        const response = {
            taken: designerTaken
          };
      res.json( response );
    })
    
});

const checkDesignerExistence = (added_designer) => {
  return new Promise((resolve, reject) => {
      pool.query('SELECT idDes FROM designer WHERE des_name = ?', [added_designer], (err, result) => {
          if(err){
              reject (err);
          }
          else{
              resolve(result);
          }
      }
      )
  })
};
  
//==============================================================================================================

//ADD SUBCATEGORY-------------------------------------------------------------------------------------------
app.post('/add_sub_category', (req, res) => {
    const category_name = req.body.category_sub;
    const sub_category_name = req.body.sub_category_name;

    getCategories()
        .then(categories => {
            const category = categories.find(cat => cat.cat_name === category_name);
            if (category) {
                return addSubCategory(category.idCat, sub_category_name);
            }
        })
        .then(() => {
            res.redirect('/item_added_conf');
        })
});

const addSubCategory = (idCat, sub_category_name) => {
    return new Promise((resolve, reject) => {
        pool.getConnection((err, conn) => {
            if (err) {
                reject(err);
            } else {
                const query = 'INSERT INTO sub_category (idCat, subCat_name) VALUES (?, ?)';
                const values = [idCat, sub_category_name];

                conn.query(query, values, (err, result) => {
                    if (err) {
                        reject(err);
                    } else {
                        resolve(result);
                    }
                    conn.release();
                });
            }
        });
    });
};

const getCategories = () => {
    return new Promise((resolve, reject) => {
        pool.getConnection((err, conn) => {
            if (err) {
                reject(err);
            } else {
                const query = 'SELECT * FROM category';

                conn.query(query, (err, results) => {
                    if (err) {
                        reject(err);
                    } else {
                        resolve(results);
                    }
                    conn.release();
                });
            }
        });
    });
};

// mengecek designer menggunakan AJAX
app.get('/check_subCategory', (req, res) => {
let subCategory = req.query.inputed_subCategory;
let subCategoryTaken = true;
checkSubCategoryExistence(subCategory).then((exists) => {
    subCategoryTaken = (JSON.parse(JSON.stringify(exists))[0]) !==undefined;
      const response = {
          taken: subCategoryTaken
        };
    res.json( response );
  })
  
});

const checkSubCategoryExistence = (added_subCategory) => {
return new Promise((resolve, reject) => {
    pool.query('SELECT idSubCat FROM  sub_category WHERE subCat_name = ?', [added_subCategory], (err, result) => {
        if(err){
            reject (err);
        }
        else{
            resolve(result);
        }
    }
    )
})
};

//==============================================================================================================


//ADD BAG-------------------------------------------------------------------------------------------
  app.get('/get_subcategories', (req, res) => {
    const category = req.query.category;
  
    getSubCategories(category)
      .then(subCategories => {
        res.json({ subCategories });
      });
  });
  
  const addBag2 = (bag_name, length, width, height, color, idSubCat, idBrand, idDes, photoData) => {
    return new Promise((resolve, reject) => {
      const queryBrand = 'SELECT idBrand FROM brand WHERE brand_name = ?';
      const valuesBrand = [idBrand];
  
      pool.query(queryBrand, valuesBrand, (errBrand, resultBrand) => {
        if (errBrand) {
          reject(errBrand);
        } else {
          const idBrand = resultBrand[0].idBrand;
  
          const queryDesigner = 'SELECT idDes FROM designer WHERE des_name = ?';
          const valuesDesigner = [idDes];
  
          pool.query(queryDesigner, valuesDesigner, (errDesigner, resultDesigner) => {
            if (errDesigner) {
              reject(errDesigner);
            } else {
              const idDes = resultDesigner[0].idDes;
  
              const insertQuery = 'INSERT INTO bag (bag_name, length, width, height, color, idSubCat, idBrand, idDes, bag_photo) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)';
              const insertValues = [bag_name, length, width, height, color, idSubCat, idBrand, idDes, photoData];
  
              pool.query(insertQuery, insertValues, (errInsert, resultInsert) => {
                if (errInsert) {
                  reject(errInsert);
                } else {
                  resolve(resultInsert);
                }
              });
            }
          });
        }
      });
    });
  }
  

  app.post('/add_bag', upload.single('bag_photo'), (req, res) => {
    const bag_name = req.body.bag_name;
    const length = req.body.dimension1;
    const width = req.body.dimension2;
    const height = req.body.dimension3;
    const color = req.body.bag_color;
    const idSubCat = req.body.bag_sub_category;
    const idBrand = req.body.select_brand;
    const idDes = req.body.select_designer;
  
    const photoData = fs.readFileSync(req.file.path); // Membaca file foto yang diunggah
  
    addBag2(bag_name, length, width, height, color, idSubCat, idBrand, idDes, photoData)
      .then((resultInsert) => {
        const bagId = resultInsert.insertId; // Mengambil ID tas yang baru saja ditambahkan
  
        // Menambahkan foto ke dalam database dengan ID tas yang baru
        changePhotoBag(bagId, photoData)
          .then(() => {
            // Mengambil foto tas yang baru saja diubah
            getNewPhotoBag(bagId)
              .then((newPhoto) => {
                req.session.photo = JSON.parse(JSON.stringify(newPhoto))[0].bag_photo;
                res.redirect('/item_added_conf');
              })
              .catch((error) => {
                console.error('Failed to get new bag photo:', error);
                res.status(500).send('Internal Server Error');
              });
          })
          .catch((error) => {
            console.error('Failed to change bag photo:', error);
            res.status(500).send('Internal Server Error');
          });
      })
      .catch((error) => {
        console.error('Failed to add bag:', error);
        res.status(500).send('Internal Server Error');
      });
  });

  const getNewPhotoBag = (idBag) => {
    return new Promise((resolve, reject) => {
      pool.query('SELECT bag_photo FROM bag WHERE idBag = ?', [idBag], (err, result) => {
        if (err) {
          reject(err);
        } else {
          resolve(result);
        }
      });
    });
  };
  
  const changePhotoBag = (idBag, photo) => {
    return new Promise((resolve, reject) => {
      pool.query('UPDATE bag SET bag_photo = ? WHERE idBag = ?', [photo, idBag], (err, result) => {
        if (err) {
          reject(err);
        } else {
          resolve(result);
        }
      });
    });
  };
  
  
  // menampilkan brand di dropdown
  const getBrands = () => {
    return new Promise((resolve, reject) => {
      pool.getConnection((err, conn) => {
        if (err) {
          reject(err);
        } else {
          const query = 'SELECT * FROM brand';
  
          conn.query(query, (err, results) => {
            if (err) {
              reject(err);
            } else {
              resolve(results);
            }
            conn.release();
          });
        }
      });
    });
  };
  

  const getDesigners = () => {
    return new Promise((resolve, reject) => {
      pool.getConnection((err, conn) => {
        if (err) {
          reject(err);
        } else {
          const query = 'SELECT * FROM designer';
  
          conn.query(query, (err, results) => {
            if (err) {
              reject(err);
            } else {
              resolve(results);
            }
            conn.release();
          });
        }
      });
    });
  };

  const getCategoriesBag = () => {
    return new Promise((resolve, reject) => {
      pool.getConnection((err, conn) => {
        if (err) {
          reject(err);
        } else {
          const query = 'SELECT * FROM category';
  
          conn.query(query, (err, results) => {
            if (err) {
              reject(err);
            } else {
              resolve(results);
            }
            conn.release();
          });
        }
      });
    });
  };

  const getSubCategories = (category) => {
    return new Promise((resolve, reject) => {
      pool.getConnection((err, conn) => {
        if (err) {
          reject(err);
        } else {
          const query = 'SELECT * FROM sub_category WHERE idCat = ?';
          conn.query(query, [category], (err, results) => {
            if (err) {
              reject(err);
            } else {
              resolve(results);
            }
            conn.release();
          });
        }
      });
    });
  };

//==============================================================================================================


//CHANGED_CONF-------------------------------------------------------------------------------------------

app.get('/changed_conf_admin', (req, res) => {
    res.render('changed_conf_admin');
});

//==============================================================================================================


//DATA_ADDED_CONF-------------------------------------------------------------------------------------------

app.get('/data_added_conf', (req, res) => {
    res.render('data_added_conf');
});

//==============================================================================================================


//SET_REVIEW-------------------------------------------------------------------------------------------

app.use(bodyParser.json());

app.get('/set_review', (req, res) => {
  res.render('set_review');
});

let minimalReview = 0;
let rentangNilai = '1-5';
app.post('/set_review', (req, res) => {
  minimalReview = req.body.minimalReview;
  rentangNilai = req.body.rentangNilai;
  let artiNilai = req.body.artiNilai;

  let values = [];

  values = artiNilai.split(';').map(value => value.trim());

  if (rentangNilai === '1-5') {
    values = values.slice(0, 5);
  }

  let reviewValues = values.map(value => [value]);

  pool.query('INSERT INTO review_value (value_desc) VALUES ?', [reviewValues], (err, result) => {
    if (err) {
      console.error('Error inserting data into review_value table:', err);
      res.status(500).json({ error: 'Error inserting data into review_value table' });
    } else {
      res.json({ success: true });
    }
  });
});



//==============================================================================================================


//IMPORT_DATA-------------------------------------------------------------------------------------------
app.get('/import_data', (req, res) => {
  res.render('import_data');
});


app.post('/import_data', upload.single('file_upload'), (req, res) => {
  const csvFile = req.file;
  console.log(csvFile);

  
  pool.getConnection((err, conn) => {
    if (err) {
      console.error('Error connecting to database:', err);
      res.status(500).send('Error connecting to database');
      return;
    }

    fs.createReadStream(csvFile.path)
      .pipe(csvParser())
      .on('data', (row) => {
        console.log(row);
        const bag = {
          bag_name: row.bag_name,
          bag_photo: Buffer.from(row.bag_photo, 'base64'),
          length: row.length,
          width: row.width,
          height: row.height,
          color: row.color,
          idSubCat: row.idSubCat,
          idDes: row.idDes,
          idBrand: row.idBrand
        };

        const query = 'INSERT INTO bag SET ?';
        conn.query(query, bag, (error, results, fields) => {
          if (error) {
            console.error('Error importing data to Bag table:', error);
          }
        });
      })
      .on('end', () => {
        conn.release(); 
        res.redirect('/item_added_conf');
      });
  });
});


//==============================================================================================================


//ADMIN DASHBOARD----------------------------------------------------------------------------------------------

const dashboard_getBrands = () => {
    return new Promise((resolve, reject) => {
      pool.getConnection((err, conn) => {
        if (err) {
          reject(err);
        } else {
          const query = 'SELECT * FROM brand';
  
          conn.query(query, (err, results) => {
            conn.release();
            if (err) {
              reject(err);
            } else {
              resolve(results);
            }
          });
        }
      });
    });
  };
  
  
  const dashboard_getDesigners = () => {
    return new Promise((resolve, reject) => {
      pool.getConnection((err, conn) => {
        if (err) {
          reject(err);
        } else {
          const query = 'SELECT * FROM designer';
  
          conn.query(query, (err, results) => {
            conn.release();
            if (err) {
              reject(err);
            } else {
              resolve(results);
            }
          });
        }
      });
    });
  };
  
  const dashboard_getCategoriesBag = () => {
    return new Promise((resolve, reject) => {
      pool.getConnection((err, conn) => {
        if (err) {
          reject(err);
        } else {
          const query = 'SELECT * FROM category';
  
          conn.query(query, (err, results) => {
            conn.release();
            if (err) {
              reject(err);
            } else {
              resolve(results);
            }
          });
        }
      });
    });
  };
  
  const dashboard_getSubCategories = (category) => {
    return new Promise((resolve, reject) => {
      pool.getConnection((err, conn) => {
        if (err) {
          reject(err);
        } else {
          const query = 'SELECT * FROM `sub_category` WHERE idCat = ?';
          conn.query(query, [category], (err, results) => {
            conn.release();
            if (err) {
              reject(err);
            } else {
              resolve(results);
            }
          });
        }
      });
    });
  };
  
  app.get('/dashboard_admin', auth, async (req, res) => {
    try {
      const brands = await dashboard_getBrands();
      const designers = await dashboard_getDesigners();
      const categories = await getCategoriesBag();
      const subCategories = await dashboard_getSubCategories();
      // Additional code to fetch and calculate the required data
      const totalBagCount = await getTotalBagCount();
      const totalCategoryCount = await getTotalCategoryCount();
      const totalSubcategoryCount = await getTotalSubcategoryCount();
      const totalBrandCount = await getTotalBrandCount();
      const totalDesignerCount = await getTotalDesignerCount();
      const lowestReviewBag = await getBagWithLowestReview();
      const lowestReviewCount = await getLowestReviewCount();
      const totalReviewCount = await getTotalReviewCount();
      const highestReviewBag = await getBagWithHighestReview();
      const highestReviewCount = await getHighestReviewCount();
      const lowestReviewValueBag = await getBagWithLowestReviewValue();
      const lowestReviewValue = await getLowestReviewValue();
      const averageReviewValue = await getAverageReviewValue();
      const highestReviewValueBag = await getBagWithHighestReviewValue();
      const highestReviewValue = await getHighestReviewValue();
  
      res.render('dashboard_admin', {
        username: req.session.username,
        brands,
        designers,
        categories,
        subCategories,
        totalBagCount,
        totalCategoryCount,
        totalSubcategoryCount,
        totalBrandCount,
        totalDesignerCount,
        lowestReviewBag,
        lowestReviewCount,
        totalReviewCount,
        highestReviewBag,
        highestReviewCount,
        lowestReviewValueBag,
        lowestReviewValue,
        averageReviewValue,
        highestReviewValueBag,
        highestReviewValue
      });
    } catch (err) {
      console.error(err);
      res.status(500).send('Internal Server Error');
    }
  });
  
  app.get('/get_subcategories', async (req, res) => {
    const { category } = req.query;
    try {
      const subcategories = await getSubCategories(category);
      res.json(subcategories);
    } catch (err) {
      console.error(err);
      res.status(500).send('Internal Server Error');
    }
  });
  
  app.get('/getSubCategories', async (req, res) => {
    const { category } = req.query;
  
    try {
      const subCategories = await getSubCategories(category);
  
      res.json({ subCategories });
    } catch (err) {
      console.error(err);
      res.status(500).send('Internal Server Error');
    }
  });
  const getTotalBagCount = () => {
    return new Promise((resolve, reject) => {
      pool.getConnection((err, conn) => {
        if (err) {
          reject(err);
        } else {
          const query = 'SELECT COUNT(*) AS totalBagCount FROM bag';
  
          conn.query(query, (err, results) => {
            conn.release();
            if (err) {
              reject(err);
            } else {
              resolve(results[0].totalBagCount);
            }
          });
        }
      });
    });
  };
  
  const getTotalCategoryCount = () => {
    return new Promise((resolve, reject) => {
      pool.getConnection((err, conn) => {
        if (err) {
          reject(err);
        } else {
          const query = 'SELECT COUNT(*) AS totalCategoryCount FROM category';
  
          conn.query(query, (err, results) => {
            conn.release();
            if (err) {
              reject(err);
            } else {
              resolve(results[0].totalCategoryCount);
            }
          });
        }
      });
    });
  };
  
  const getTotalSubcategoryCount = () => {
    return new Promise((resolve, reject) => {
      pool.getConnection((err, conn) => {
        if (err) {
          reject(err);
        } else {
          const query = 'SELECT COUNT(*) AS totalSubcategoryCount FROM `sub_category`';
  
          conn.query(query, (err, results) => {
            conn.release();
            if (err) {
              reject(err);
            } else {
              resolve(results[0].totalSubcategoryCount);
            }
          });
        }
      });
    });
  };
  
  const getTotalBrandCount = () => {
    return new Promise((resolve, reject) => {
      pool.getConnection((err, conn) => {
        if (err) {
          reject(err);
        } else {
          const query = 'SELECT COUNT(*) AS totalBrandCount FROM brand';
  
          conn.query(query, (err, results) => {
            conn.release();
            if (err) {
              reject(err);
            } else {
              resolve(results[0].totalBrandCount);
            }
          });
        }
      });
    });
  };
  
  const getTotalDesignerCount = () => {
    return new Promise((resolve, reject) => {
      pool.getConnection((err, conn) => {
        if (err) {
          reject(err);
        } else {
          const query = 'SELECT COUNT(*) AS totalDesignerCount FROM designer';
  
          conn.query(query, (err, results) => {
            conn.release();
            if (err) {
              reject(err);
            } else {
              resolve(results[0].totalDesignerCount);
            }
          });
        }
      });
    });
  };
  
  const getBagWithLowestReview = () => {
    return new Promise((resolve, reject) => {
      pool.getConnection((err, conn) => {
        if (err) {
          reject(err);
        } else {
          const query = 'SELECT b.bag_name, COUNT(r.idBag) AS review_count FROM review r JOIN bag b ON r.idBag = b.idBag GROUP BY r.idBag ORDER BY review_count ASC LIMIT 1';
  
          conn.query(query, (err, results) => {
            conn.release();
            if (err) {
              reject(err);
            } else {
              resolve(results[0]);
            }
          });
        }
      });
    });
  };
  
  const getLowestReviewCount = () => {
    return new Promise((resolve, reject) => {
      pool.getConnection((err, conn) => {
        if (err) {
          reject(err);
        } else {
          const query = 'SELECT MIN(review_count) AS lowest_review_count FROM (SELECT COUNT(idReview) AS review_count FROM review GROUP BY idBag) AS subquery';
  
          conn.query(query, (err, result) => {
            conn.release();
            if (err) {
              reject(err);
            } else {
              resolve(result[0].lowest_review_count);
            }
          });
        }
      });
    });
  };
  
  const getTotalReviewCount = () => {
    return new Promise((resolve, reject) => {
      pool.getConnection((err, conn) => {
        if (err) {
          reject(err);
        } else {
          const query = 'SELECT SUM(review_count) AS total_review_count FROM (SELECT COUNT(idReview) AS review_count FROM review GROUP BY idBag) AS subquery';
  
          conn.query(query, (err, result) => {
            conn.release();
            if (err) {
              reject(err);
            } else {
              resolve(result[0].total_review_count);
            }
          });
        }
      });
    });
  };
  
  const getBagWithHighestReview = () => {
    return new Promise((resolve, reject) => {
      pool.getConnection((err, conn) => {
        if (err) {
          reject(err);
        } else {
          const query = 'SELECT b.bag_name, COUNT(r.idBag) AS review_count FROM review r JOIN bag b ON r.idBag = b.idBag GROUP BY r.idBag ORDER BY review_count DESC LIMIT 1';
  
          conn.query(query, (err, results) => {
            conn.release();
            if (err) {
              reject(err);
            } else {
              resolve(results[0]);
            }
          });
        }
      });
    });
  };
  
  const getHighestReviewCount = () => {
    return new Promise((resolve, reject) => {
      pool.getConnection((err, conn) => {
        if (err) {
          reject(err);
        } else {
          const query = 'SELECT MAX(review_count) AS highest_review_count FROM (SELECT COUNT(idReview) AS review_count FROM review GROUP BY idBag) AS subquery';
  
          conn.query(query, (err, result) => {
            conn.release();
            if (err) {
              reject(err);
            } else {
              resolve(result[0].highest_review_count);
            }
          });
        }
      });
    });
  };
  
  const getBagWithLowestReviewValue = () => {
    return new Promise((resolve, reject) => {
      pool.getConnection((err, conn) => {
        if (err) {
          reject(err);
        } else {
          const query = `
            SELECT b.bag_name
            FROM bag AS b
            JOIN review AS r ON b.idBag = r.idBag
            ORDER BY r.value ASC
            LIMIT 1
          `;
  
          conn.query(query, (err, result) => {
            conn.release();
            if (err) {
              reject(err);
            } else {
              resolve(result[0].bag_name);
            }
          });
        }
      });
    });
  };
  
  const getLowestReviewValue = () => {
    return new Promise((resolve, reject) => {
      pool.getConnection((err, conn) => {
        if (err) {
          reject(err);
        } else {
          const query = `
            SELECT MIN(value) AS lowest_review_value
            FROM review
          `;
  
          conn.query(query, (err, result) => {
            conn.release();
            if (err) {
              reject(err);
            } else {
              resolve(result[0].lowest_review_value);
            }
          });
        }
      });
    });
  };
  
  const getAverageReviewValue = () => {
    return new Promise((resolve, reject) => {
      pool.getConnection((err, conn) => {
        if (err) {
          reject(err);
        } else {
          const query = `
            SELECT AVG(value) AS average_review_value
            FROM review
          `;
  
          conn.query(query, (err, result) => {
            conn.release();
            if (err) {
              reject(err);
            } else {
              resolve(result[0].average_review_value);
            }
          });
        }
      });
    });
  };
  
  const getBagWithHighestReviewValue = () => {
    return new Promise((resolve, reject) => {
      pool.getConnection((err, conn) => {
        if (err) {
          reject(err);
        } else {
          const query = `
            SELECT b.bag_name
            FROM bag AS b
            JOIN review AS r ON b.idBag = r.idBag
            ORDER BY r.value DESC
            LIMIT 1
          `;
  
          conn.query(query, (err, result) => {
            conn.release();
            if (err) {
              reject(err);
            } else {
              resolve(result[0].bag_name);
            }
          });
        }
      });
    });
  };
  
  const getHighestReviewValue = () => {
    return new Promise((resolve, reject) => {
      pool.getConnection((err, conn) => {
        if (err) {
          reject(err);
        } else {
          const query = `
            SELECT MAX(value) AS highest_review_value
            FROM review
          `;
  
          conn.query(query, (err, result) => {
            conn.release();
            if (err) {
              reject(err);
            } else {
              resolve(result[0].highest_review_value);
            }
          });
        }
      });
    });
  };

//see_report-------------------------------------------------------------------------------------------------------
app.get('/see_report', async (req, res) => {
    try {
      // Query the database to retrieve the necessary data
      const bagQuery = `
        SELECT Bag.bag_name, Category.cat_name, sub_category.subCat_name, Brand.brand_name, Designer.des_name,
        COUNT(Review.idReview) AS bagCount, ROUND(AVG(Review.value), 1) AS reviewValueAvg
        FROM Category
        JOIN sub_category ON Category.idCat = sub_category.idCat
        JOIN Bag ON Bag.idSubCat = sub_category.idSubCat
        JOIN Brand ON Brand.idBrand = Bag.idBrand
        JOIN Designer ON Designer.idDes = Bag.idDes       
        JOIN Review ON Bag.idBag = Review.idBag
        GROUP BY Bag.idBag
      `;
  
      const categoryQuery = `
        SELECT Category.cat_name, COUNT(Review.idReview) AS ReviewCount, ROUND(AVG(Review.value), 1) AS reviewValueAvg
        FROM Category
        JOIN sub_category ON Category.idCat = sub_category.idCat
        JOIN Bag ON Bag.idSubCat = sub_category.idSubCat
        JOIN Brand ON Brand.idBrand = Bag.idBrand
        JOIN Designer ON Designer.idDes = Bag.idDes
        JOIN Review ON Bag.idBag = Review.idBag
        GROUP BY Category.idCat
      `;
  
      const subCategoryQuery = `
        SELECT Category.cat_name, sub_category.subCat_name, COUNT(Review.idReview) AS ReviewCount, ROUND(AVG(Review.value), 1) AS reviewValueAvg
        FROM Category
        JOIN sub_category ON Category.idCat = sub_category.idCat
        JOIN Bag ON Bag.idSubCat = sub_category.idSubCat
        JOIN Brand ON Brand.idBrand = Bag.idBrand
        JOIN Designer ON Designer.idDes = Bag.idDes
        JOIN Review ON Bag.idBag = Review.idBag
        GROUP BY sub_category.idSubCat
      `;
  
      const brandQuery = `
        SELECT Brand.brand_name, COUNT(Review.idReview) AS ReviewCount, ROUND(AVG(Review.value), 1) AS reviewValueAvg
        FROM Category
        JOIN sub_category ON Category.idCat = sub_category.idCat
        JOIN Bag ON Bag.idSubCat = sub_category.idSubCat
        JOIN Brand ON Brand.idBrand = Bag.idBrand
        JOIN Designer ON Designer.idDes = Bag.idDes
        JOIN Review ON Bag.idBag = Review.idBag
        GROUP BY Brand.idBrand
      `;
      
      const designerQuery = `
        SELECT Designer.des_name, COUNT(Review.idReview) AS ReviewCount, ROUND(AVG(Review.value), 1) AS reviewValueAvg
        FROM Category
        JOIN sub_category ON Category.idCat = sub_category.idCat
        JOIN Bag ON Bag.idSubCat = sub_category.idSubCat
        JOIN Brand ON Brand.idBrand = Bag.idBrand
        JOIN Designer ON Designer.idDes = Bag.idDes
        JOIN Review ON Bag.idBag = Review.idBag
        GROUP BY Designer.idDes
      `;
  
      const conn = await dbConnect(); // Connect to the database
  
      // Retrieve data for bags report
      const bagResults = await new Promise((resolve, reject) => {
        conn.query(bagQuery, (err, rows) => {
          if (err) {
            reject(err);
          } else {
            resolve(rows);
          }
        });
      });
  
      const bags = bagResults.map(row => ({
        bag_name: row.bag_name,
        cat_name: row.cat_name,
        subCat_name: row.subCat_name,
        brand_name: row.brand_name,
        des_name: row.des_name,
        bagCount: row.bagCount,
        reviewValueAvg: row.reviewValueAvg,
      }));
  
      // Retrieve data for category report
      const categoryResults = await new Promise((resolve, reject) => {
        conn.query(categoryQuery, (err, rows) => {
          if (err) {
            reject(err);
          } else {
            resolve(rows);
          }
        });
      });
  
      const categoryReport = categoryResults.map(row => ({
        cat_name: row.cat_name,
        ReviewCount: row.ReviewCount,
        reviewValueAvg: row.reviewValueAvg,
      }));
  
      // Retrieve data for sub-category report
      const subCategoryResults = await new Promise((resolve, reject) => {
        conn.query(subCategoryQuery, (err, rows) => {
          if (err) {
            reject(err);
          } else {
            resolve(rows);
          }
        });
      });
  
      const subCategoryReport = subCategoryResults.map(row => ({
        cat_name: row.cat_name,
        subCat_name: row.subCat_name,
        ReviewCount: row.ReviewCount,
        reviewValueAvg: row.reviewValueAvg,
      }));
  
      // Retrieve data for brand report
      const brandResults = await new Promise((resolve, reject) => {
        conn.query(brandQuery, (err, rows) => {
          if (err) {
            reject(err);
          } else {
            resolve(rows);
          }
        });
      });
  
      const brandReport = brandResults.map(row => ({
        brand_name: row.brand_name,
        ReviewCount: row.ReviewCount,
        reviewValueAvg: row.reviewValueAvg,
      }));
      
      // Retrieve data for designer report
      const designerResults = await new Promise((resolve, reject) => {
        conn.query(designerQuery, (err, rows) => {
          if (err) {
            reject(err);
          } else {
            resolve(rows);
          }
        });
      });
  
      const designerReport = designerResults.map(row => ({
        des_name: row.des_name,
        ReviewCount: row.ReviewCount,
        reviewValueAvg: row.reviewValueAvg,
      }));
  
      res.render('see_report', { bags, categoryReport, subCategoryReport, brandReport, designerReport }); // Render the see_report.ejs template with the retrieved data
    } catch (error) {
      console.error(error);
      res.status(500).send('Internal Server Error');
    }
  });
  
  import { PDFDocument, StandardFonts, rgb } from 'pdf-lib';
  import { fileURLToPath } from 'url';
  import { dirname } from 'path';
  
  app.post('/generate_report_pdf', async (req, res) => {
    try {
      const conn = await dbConnect(); // Connect to the database
  
      const bagQuery = `
        SELECT Bag.bag_name, Category.cat_name, sub_category.subCat_name, Brand.brand_name, Designer.des_name,
        COUNT(Review.idReview) AS bagCount, ROUND(AVG(Review.value), 1) AS reviewValueAvg
        FROM Category
        JOIN sub_category ON Category.idCat = sub_category.idCat
        JOIN Bag ON Bag.idSubCat = sub_category.idSubCat
        JOIN Brand ON Brand.idBrand = Bag.idBrand
        JOIN Designer ON Designer.idDes = Bag.idDes       
        JOIN Review ON Bag.idBag = Review.idBag
        GROUP BY Bag.idBag
      `;
  
      const bags = await new Promise((resolve, reject) => {
        conn.query(bagQuery, (err, rows) => {
          if (err) {
            reject(err);
          } else {
            resolve(rows);
          }
        });
      });
  
      const categoryQuery = `
        SELECT Category.cat_name, COUNT(Review.idReview) AS ReviewCount, AVG(Review.value) AS reviewValueAvg
        FROM Category
        JOIN sub_category ON Category.idCat = sub_category.idCat
        JOIN Bag ON Bag.idSubCat = sub_category.idSubCat
        JOIN Brand ON Brand.idBrand = Bag.idBrand
        JOIN Designer ON Designer.idDes = Bag.idDes
        JOIN Review ON Bag.idBag = Review.idBag
        GROUP BY Category.idCat
      `;
  
      const categoryReport = await new Promise((resolve, reject) => {
        conn.query(categoryQuery, (err, rows) => {
          if (err) {
            reject(err);
          } else {
            resolve(rows);
          }
        });
      });
  
      const subCategoryQuery = `
        SELECT Category.cat_name, sub_category.subCat_name, COUNT(Review.idReview) AS ReviewCount, AVG(Review.value) AS reviewValueAvg
        FROM Category
        JOIN sub_category ON Category.idCat = sub_category.idCat
        JOIN Bag ON Bag.idSubCat = sub_category.idSubCat
        JOIN Brand ON Brand.idBrand = Bag.idBrand
        JOIN Designer ON Designer.idDes = Bag.idDes
        JOIN Review ON Bag.idBag = Review.idBag
        GROUP BY sub_category.idSubCat
      `;
  
      const subCategoryReport = await new Promise((resolve, reject) => {
        conn.query(subCategoryQuery, (err, rows) => {
          if (err) {
            reject(err);
          } else {
            resolve(rows);
          }
        });
      });
  
      const brandQuery = `
        SELECT Brand.brand_name, COUNT(Review.idReview) AS ReviewCount, AVG(Review.value) AS reviewValueAvg
        FROM Category
        JOIN sub_category ON Category.idCat = sub_category.idCat
        JOIN Bag ON Bag.idSubCat = sub_category.idSubCat
        JOIN Brand ON Brand.idBrand = Bag.idBrand
        JOIN Designer ON Designer.idDes = Bag.idDes
        JOIN Review ON Bag.idBag = Review.idBag
        GROUP BY Brand.idBrand
      `;
  
      const brandReport = await new Promise((resolve, reject) => {
        conn.query(brandQuery, (err, rows) => {
          if (err) {
            reject(err);
          } else {
            resolve(rows);
          }
        });
      });
  
      const designerQuery = `
        SELECT Designer.des_name, COUNT(Review.idReview) AS ReviewCount, AVG(Review.value) AS reviewValueAvg
        FROM Category
        JOIN sub_category ON Category.idCat = sub_category.idCat
        JOIN Bag ON Bag.idSubCat = sub_category.idSubCat
        JOIN Brand ON Brand.idBrand = Bag.idBrand
        JOIN Designer ON Designer.idDes = Bag.idDes
        JOIN Review ON Bag.idBag = Review.idBag
        GROUP BY Designer.idDes
      `;
  
      const designerReport = await new Promise((resolve, reject) => {
        conn.query(designerQuery, (err, rows) => {
          if (err) {
            reject(err);
          } else {
            resolve(rows);
          }
        });
      });
  
      const pdfDoc = await PDFDocument.create();
      const page = null;
  
      // Set the font for the page
      const font = await pdfDoc.embedFont(StandardFonts.Helvetica);
  
      const unsortedBagTable = `Unsorted Bag Table:\n`
        + `${bags.map(row => `${row.bag_name}, ${row.cat_name}, ${row.subCat_name}, ${row.brand_name}, ${row.des_name}, ${row.bagCount}, ${row.reviewValueAvg}`).join('\n')}\n\n`;
  
      const unsortedCategoryTable = `Unsorted Category Table:\n`
        + `${categoryReport.map(row => `${row.cat_name}, ${row.ReviewCount}, ${row.reviewValueAvg}`).join('\n')}\n\n`;
  
      const unsortedSubcategoryTable = `Unsorted Subcategory Table:\n`
        + `${subCategoryReport.map(row => `${row.cat_name}, ${row.subCat_name}, ${row.ReviewCount}, ${row.reviewValueAvg}`).join('\n')}\n\n`;
  
      const unsortedBrandTable = `Unsorted Brand Table:\n`
        + `${brandReport.map(row => `${row.brand_name}, ${row.ReviewCount}, ${row.reviewValueAvg}`).join('\n')}\n\n`;
  
      const unsortedDesignerTable = `Unsorted Designer Table:\n`
        + `${designerReport.map(row => `${row.des_name}, ${row.ReviewCount}, ${row.reviewValueAvg}`).join('\n')}\n\n`;
  
      const sortedBagByName = [...bags].sort((a, b) => a.bag_name.localeCompare(b.bag_name));
      const sortedCategoryByName = [...categoryReport].sort((a, b) => a.cat_name.localeCompare(b.cat_name));
      const sortedSubcategoryByName = [...subCategoryReport].sort((a, b) => a.subCat_name.localeCompare(b.subCat_name));
      const sortedBrandByName = [...brandReport].sort((a, b) => a.brand_name.localeCompare(b.brand_name));
      const sortedDesignerByName = [...designerReport].sort((a, b) => a.des_name.localeCompare(b.des_name));
  
      // Sort the tables by review count in descending order (high to low)
      const sortedBagByReviewCount = [...bags].sort((a, b) => b.bagCount - a.bagCount);
      const sortedCategoryByReviewCount = [...categoryReport].sort((a, b) => b.ReviewCount - a.ReviewCount);
      const sortedSubcategoryByReviewCount = [...subCategoryReport].sort((a, b) => b.ReviewCount - a.ReviewCount);
      const sortedBrandByReviewCount = [...brandReport].sort((a, b) => b.ReviewCount - a.ReviewCount);
      const sortedDesignerByReviewCount = [...designerReport].sort((a, b) => b.ReviewCount - a.ReviewCount);
  
      // Sort the tables by average review value in descending order (high to low)
      const sortedBagByReviewValue = [...bags].sort((a, b) => b.reviewValueAvg - a.reviewValueAvg);
      const sortedCategoryByReviewValue = [...categoryReport].sort((a, b) => b.reviewValueAvg - a.reviewValueAvg);
      const sortedSubcategoryByReviewValue = [...subCategoryReport].sort((a, b) => b.reviewValueAvg - a.reviewValueAvg);
      const sortedBrandByReviewValue = [...brandReport].sort((a, b) => b.reviewValueAvg - a.reviewValueAvg);
      const sortedDesignerByReviewValue = [...designerReport].sort((a, b) => b.reviewValueAvg - a.reviewValueAvg);
  
      const sortedTables = `Sorted Tables:\n`
        + `Sorted Bag Table by Name (Ascending):\n`
        + `${sortedBagByName.map(row => `${row.bag_name}, ${row.cat_name}, ${row.subCat_name}, ${row.brand_name}, ${row.des_name}, ${row.bagCount}, ${row.reviewValueAvg}`).join('\n')}\n\n`
        + `Sorted Bag Table by Review Count (Highest to Lowest):\n`
        + `${sortedBagByReviewCount.map(row => `${row.bag_name}, ${row.cat_name}, ${row.subCat_name}, ${row.brand_name}, ${row.des_name}, ${row.bagCount}, ${row.reviewValueAvg}`).join('\n')}\n\n`
        + `Sorted Bag Table by Average Review Value (Highest to Lowest):\n`
        + `${sortedBagByReviewValue.map(row => `${row.bag_name}, ${row.cat_name}, ${row.subCat_name}, ${row.brand_name}, ${row.des_name}, ${row.bagCount}, ${row.reviewValueAvg}`).join('\n')}\n\n`
        + `Sorted Category Table by Name (Ascending):\n`
        + `${sortedCategoryByName.map(row => `${row.cat_name}, ${row.ReviewCount}, ${row.reviewValueAvg}`).join('\n')}\n\n`
        + `Sorted Category Table by Review Count (Highest to Lowest):\n`
        + `${sortedCategoryByReviewCount.map(row => `${row.cat_name}, ${row.ReviewCount}, ${row.reviewValueAvg}`).join('\n')}\n\n`
        + `Sorted Category Table by Average Review Value (Highest to Lowest):\n`
        + `${sortedCategoryByReviewValue.map(row => `${row.cat_name}, ${row.ReviewCount}, ${row.reviewValueAvg}`).join('\n')}\n\n`
        + `Sorted Subcategory Table by Name (Ascending):\n`
        + `${sortedSubcategoryByName.map(row => `${row.cat_name}, ${row.subCat_name}, ${row.ReviewCount}, ${row.reviewValueAvg}`).join('\n')}\n\n`
        + `Sorted Subcategory Table by Review Count (Highest to Lowest):\n`
        + `${sortedSubcategoryByReviewCount.map(row => `${row.cat_name}, ${row.subCat_name}, ${row.ReviewCount}, ${row.reviewValueAvg}`).join('\n')}\n\n`
        + `Sorted Subcategory Table by Average Review Value (Highest to Lowest):\n`
        + `${sortedSubcategoryByReviewValue.map(row => `${row.cat_name}, ${row.subCat_name}, ${row.ReviewCount}, ${row.reviewValueAvg}`).join('\n')}\n\n`
        + `Sorted Brand Table by Name (Ascending):\n`
        + `${sortedBrandByName.map(row => `${row.brand_name}, ${row.ReviewCount}, ${row.reviewValueAvg}`).join('\n')}\n\n`
        + `Sorted Brand Table by Review Count (Highest to Lowest):\n`
        + `${sortedBrandByReviewCount.map(row => `${row.brand_name}, ${row.ReviewCount}, ${row.reviewValueAvg}`).join('\n')}\n\n`
        + `Sorted Brand Table by Average Review Value (Highest to Lowest):\n`
        + `${sortedBrandByReviewValue.map(row => `${row.brand_name}, ${row.ReviewCount}, ${row.reviewValueAvg}`).join('\n')}\n\n`
        + `Sorted Designer Table by Name (Ascending):\n`
        + `${sortedDesignerByName.map(row => `${row.des_name}, ${row.ReviewCount}, ${row.reviewValueAvg}`).join('\n')}\n\n`
        + `Sorted Designer Table by Review Count (Highest to Lowest):\n`
        + `${sortedDesignerByReviewCount.map(row => `${row.des_name}, ${row.ReviewCount}, ${row.reviewValueAvg}`).join('\n')}\n\n`
        + `Sorted Designer Table by Average Review Value (Highest to Lowest):\n`
        + `${sortedDesignerByReviewValue.map(row => `${row.des_name}, ${row.ReviewCount}, ${row.reviewValueAvg}`).join('\n')}\n\n`;
  
      // Generate the report content
      const content = `Report!!!\n\n`
        + unsortedBagTable
        + unsortedCategoryTable
        + unsortedSubcategoryTable
        + unsortedBrandTable
        + unsortedDesignerTable
        + sortedTables;
  
      // Calculate the height of the content
  // Set the page size and margins
  const pageWidth = 720;
  const pageHeight = 800;
  const margin = 50;
  let currentPage = null;
  let y = pageHeight - margin;
  let isFirstPage = true;
  
  // Calculate the height of the content
  const textHeight = font.heightAtSize(12);
  const lineSpacing = 10;
  const availableHeight = pageHeight - margin * 2;
  const maxLinesPerPage = Math.floor(availableHeight / (textHeight + lineSpacing));
  
  // Split the content into lines
  const textLines = content.split('\n');
  
  // Iterate over the lines and draw them on the pages
  let linesDrawn = 0;
  
  for (const line of textLines) {
    if (linesDrawn === maxLinesPerPage || currentPage === null) {
      // Skip the first page if there is no content to be drawn
      if (isFirstPage && linesDrawn === 0) {
        isFirstPage = false;
      } else {
        // Create a new page when the current page is full or if there is no current page
        currentPage = pdfDoc.addPage([pageWidth, pageHeight]);
        y = currentPage.getHeight() - margin;
      }
      linesDrawn = 0;
    }
  
    if (currentPage) {
      currentPage.drawText(line, {
        x: margin,
        y,
        size: 12,
        font,
      });
  
      y -= textHeight + lineSpacing;
      linesDrawn++;
    }
  }
  // Save the PDF document to a file
  const pdfBytes = await pdfDoc.save();
  const fileName = 'report.pdf';
  const currentFilePath = fileURLToPath(import.meta.url);
  // Resolve the directory path
  const currentDirPath = dirname(currentFilePath);
  const filePath = `${currentDirPath}/${fileName}`;
  
  fs.writeFileSync(filePath, pdfBytes);
  
  res.download(filePath, 'report.pdf', (err) => {
    if (err) {
      console.error(err);
      res.status(500).send('Internal Server Error');
    }
  
    // Delete the generated file after download
    fs.unlinkSync(filePath);
  });
    } catch (error) {
      console.error(error);
      res.status(500).send('Internal Server Error');
    }
  });
  